import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Importar as fun√ß√µes dos arquivos que voc√™ criou
from core.data.io import read_csv_smart
from core.features.preprocess import make_preprocess_pipeline
from core.models.train import train_regressor
from core.models.predict import evaluate_regressor
from core.explain.coefficients import extract_linear_importances
from core.chatbot.rules import answer_from_metrics

# Configurar a p√°gina do Streamlit
st.set_page_config(page_title="An√°lise de Vendas BigMart", layout="wide")

# --------------------------------------------------------------------------------------
# Estado inicial
# --------------------------------------------------------------------------------------
if "chat_messages" not in st.session_state:
    # Hist√≥rico do chat para a aba Chat
    st.session_state.chat_messages = [
        {"role": "assistant", "content": "Ol√°! Envie seu CSV, treine o modelo e depois me pergunte sobre m√©tricas ou vari√°veis importantes. ÔøΩ"}
    ]

# Para o chat usar contexto do √∫ltimo treino
for key in ["last_task", "last_metrics", "last_importances"]:
    st.session_state.setdefault(key, None)

# --------------------------------------------------------------------------------------
# Sidebar
# --------------------------------------------------------------------------------------
st.title("üß™ An√°lise de Vendas BigMart")

with st.sidebar:
    st.header("Configura√ß√µes")
    st.info("Esta aplica√ß√£o √© para Regress√£o, prevendo vendas (`Item_Outlet_Sales`).")
    test_size = st.slider("Tamanho do teste", 0.1, 0.4, 0.2, 0.05)
    uploaded = st.file_uploader("Envie o arquivo Train.csv", type=["csv"])

# --------------------------------------------------------------------------------------
# Abas: Treino & M√©tricas | Chat
# --------------------------------------------------------------------------------------
tab_train, tab_chat = st.tabs(["üìä Treino & M√©tricas", "üí¨ Chat"])

with tab_train:
    question_train = st.text_input("Pergunte algo (r√°pido) aqui durante o treino (opcional):", placeholder="Ex.: Quais vari√°veis mais importam?")

    if uploaded:
        df = read_csv_smart(uploaded)
        st.write("Pr√©via dos dados", df.head())

        # Tratar o caso de o usu√°rio enviar o arquivo errado
        target = "Item_Outlet_Sales"
        if target not in df.columns:
            st.error(f"Coluna alvo '{target}' n√£o encontrada no CSV. Por favor, envie o 'Train.csv' correto.")
            st.stop()

        # Remover colunas irrelevantes para o modelo
        drop_cols = [c for c in ["Item_Identifier", "Outlet_Identifier"] if c in df.columns]
        df = df.drop(columns=drop_cols)

        # Tratar valores ausentes
        df['Item_Weight'].fillna(df['Item_Weight'].mean(), inplace=True)
        df['Outlet_Size'].fillna(df['Outlet_Size'].mode()[0], inplace=True)
        df['Item_Fat_Content'] = df['Item_Fat_Content'].replace({
            'low fat': 'Low Fat', 'LF': 'Low Fat', 'reg': 'Regular'
        })

        # Separar features (X) e a vari√°vel alvo (y)
        y = df[target]
        X = df.drop(columns=[target])

        # Pipeline de pr√©-processamento
        pre = make_preprocess_pipeline(X)
        model, X_test, y_test = train_regressor(X, y, pre, test_size=test_size)

        # M√©tricas de regress√£o
        metrics = evaluate_regressor(model, X_test, y_test)
        st.subheader("üìà M√©tricas (Regress√£o)")
        st.json(metrics)

        # Import√¢ncias
        importances = extract_linear_importances(model, X.columns, pre)
        st.subheader("üîé Import√¢ncias (Coeficientes)")
        st.dataframe(importances.head(20), use_container_width=True)

        # Salvar para o chat
        st.session_state.last_task = "Regress√£o"
        st.session_state.last_metrics = metrics
        st.session_state.last_importances = importances

        if question_train:
            ans = answer_from_metrics(question_train, "Regress√£o", metrics, importances)
            st.info(ans)
            st.session_state.chat_messages.append({"role": "user", "content": question_train})
            st.session_state.chat_messages.append({"role": "assistant", "content": ans})

    else:
        st.info("‚¨ÜÔ∏è Envie o arquivo Train.csv na barra lateral para come√ßar.")

with tab_chat:
    st.caption("Converse com o assistente sobre as m√©tricas e import√¢ncias do √∫ltimo treino.")
    # Render hist√≥rico
    for m in st.session_state.chat_messages:
        with st.chat_message(m["role"]):
            st.markdown(m["content"])

    # Entrada de chat ao final da p√°gina
    prompt = st.chat_input("Fa√ßa sua pergunta (ex.: Quais vari√°veis mais importam?)")
    if prompt:
        st.session_state.chat_messages.append({"role": "user", "content": prompt})

        task_ctx = st.session_state.get("last_task")
        metrics_ctx = st.session_state.get("last_metrics")
        importances_ctx = st.session_state.get("last_importances")

        if task_ctx and metrics_ctx is not None and importances_ctx is not None:
            ans = answer_from_metrics(prompt, task_ctx, metrics_ctx, importances_ctx)
        else:
            ans = "Ainda n√£o h√° um modelo treinado nesta sess√£o. V√° em **üìä Treino & M√©tricas**, envie o CSV e treine o modelo primeiro."

        st.session_state.chat_messages.append({"role": "assistant", "content": ans})
        with st.chat_message("assistant"):
            st.markdown(ans)